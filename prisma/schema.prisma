// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(uuid())
  name                  String?
  username              String                 @unique @default(cuid())
  email                 String?                @unique
  bio                   String?
  emailVerified         DateTime?
  image                 String?                @default("https://lh3.googleusercontent.com/pw/AP1GczNDXsU5LMUN4rh1pqD5kz0Y_WwQRQqroU10UeGihIMhGSWYeIbs5H7hAkZnntTqyNsGtXmQCsBhHq_woAGoxJnHhgh4NSILLzndZET6WMfOuRZs_RD9Ss1MZKcgJ8v2aqUVcu_s3ABRlYa0alsAzSQ=w639-h639-s-no-gm?authuser=0")
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  followers             Follow[]               @relation("FollowerRelation")
  following             Follow[]               @relation("FollowingRelation")
  articles              Article[]
  Comments              Comments[]
  likes                 Like[]                 @relation("LikeRelation")
  tagFollow             TagFollow[]            @relation("TagFollowRelation")
  watching              Watching[]
}

model Follow {
  id                String   @id @default(uuid())
  follower          User     @relation("FollowerRelation", fields: [followerUsername], references: [username])
  followerUsername  String   @unique
  following         User     @relation("FollowingRelation", fields: [followingUsername], references: [username])
  followingUsername String   @unique
  createdAt         DateTime @default(now())
}

model Article {
  id          String     @id @unique
  title       String
  description String
  image       String?
  content     Json[]
  author      User       @relation(fields: [authorId], references: [username])
  authorId    String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
  draft       Boolean
  tags        String[]
  Comments    Comments[]
  likes       Like[]     @relation("LikeRelation")
  Watching    Watching[]
  rating      String?
}

model Like {
  id        String   @id @default(cuid())
  user      User     @relation("LikeRelation", fields: [userId], references: [username])
  userId    String
  article   Article  @relation("LikeRelation", fields: [articleId], references: [id])
  articleId String
  createdAt DateTime @default(now())
}

model Watching {
  user      User     @relation(fields: [userId], references: [username])
  userId    String   @id @unique
  article   Article  @relation(fields: [articleId], references: [id])
  articleId String
  createdAt DateTime @default(now())
}

model TagFollow {
  id        String   @id @default(uuid())
  tag       String?
  user      User     @relation("TagFollowRelation", fields: [userId], references: [username])
  userId    String
  createdAt DateTime @default(now())
}

model Comments {
  id        String    @id @default(cuid())
  content   String?
  createdAt DateTime  @default(now())
  author    User      @relation(fields: [authorId], references: [username])
  authorId  String
  articles  Article[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
